[daemon]

; country determines the training dataset used for recognizing plates.  
; Valid values can be found in /usr/share/openalpr/runtime_data/config
country = br

; topn is the number of possible plate character variations to report
topn = 10

; Applies a pattern against the results to improve accuracy.  Patterns are located in 
; runtime_data/postprocess/[country].patterns. For example using a value of la would compare 
; against the Louisiana license plate templates (letter-letter-letter-number-number-number)
; OpenALPR state recognition in the USA is highly accurate and will auto-detect the state if this value is left unchanged
pattern = 

; Plate grouping looks for similar plates during the same time period
plate_groups_enabled = 1

; The maximum time between matching plate reads
plate_groups_time_delta_ms = 1800

; Form a group after at least this many similar plates are seen
plate_groups_min_plates_to_group = 2

; Ignore plates (for the purposes of grouping) with a lower confidence
plate_groups_min_confidence = 80.0

; Stop a single group at this number to avoid memory explosion
plate_groups_max_plates_to_group = 2500

; Send a preview group result before the vehicle has left the scene.  This is useful for 
; real-time use-cases such as access control
plate_group_enable_preview = 0

; The number of plate reads before sending a preview.  A higher number leads to more accurate results on 
; previews but adds delay
plate_group_preview_min_reads = 5

; Combine all reads from all cameras on this agent to one group.
; This is useful when the cameras are viewing the same vehicles at the same time
plate_groups_span_cameras = 0

; Track vehicles and upload when a plate is not recognized.  Vehicle classification must be enabled as well
vehicle_tracking_enabled = 1

; A ratio (between 0 and 1.0) of how often to generate vehicle tracking signatures.  Lowering this value improves speed
; but also makes it more likely to miss tracking a vehicle.  This parameter does not affect license plate recognition
vehicle_tracking_sample_rate = 0.7

; Parked car detection filters group entries for sequential plate results that have not moved
; These parameters control the sensitivity used for detecting these situations
parked_car_detection_enabled = 1

; How long to wait between subsequent recognitions before forgetting about the parked car
parked_car_max_delta_ms = 180000

; How close from the previous location (as a percentage of the plate size) must the plate be to 
; consider it parked
parked_car_max_distance_multiplier = 1.2

; How many character differences between plates will we allow to consider the plate the same
parked_car_max_text_distance = 1

; Motion stickiness determines how long the motion detection lingers on a particular area 
; where motion has recently been detected.  When vehicles wait at a stop sign, 
; high stickiness would be best, so that the plate continues to read while the vehicle is not moving. 
; If capturing on a fast-moving highway, low stickiness would be better.
; Values should be specified between 0 (low stickiness) and 100 (high stickiness)
motion_stickiness = 60.0

; Determines whether images that contain plates should be stored to disk
store_plates = 1

; JPEG image quality (between 1 and 100).  Filesize increases exponentially as quality approaches 100
store_plates_jpeg_quality = 85

; Configure a maximum width/height for JPEG storage.  Images will be downsampled prior to storing.  This saves storage space 
; and increases performance by reducing JPEG encoding time.  Set to -1 for no limit (use the true size of the input video)
store_plates_jpeg_max_width = 1920
store_plates_jpeg_max_height = 1080

; The location on disk to store the plate images
store_plates_location = /var/lib/openalpr/plateimages

; Store one image per vehicle, do not retain images for individual plate reads
store_only_group_images = 1

; The maximum size allowed for plate images.  Older plates will be automatically deleted to save new plates.
store_plates_maxsize_gb = 8

; Whether or not to store h264 video clips to the local filesystem.  Storing video provides light NVR 
; functionality within the OpenALPR web interface.  The video stream must be configured for rtsp over h264 
store_video = 0

; Location used to store video clips in a rolling database
store_video_location = /var/lib/openalpr/videoclips

; Maximum disk space used to store video data.  Older video clips will be automatically deleted to make 
; room for new video clips.
store_video_maxsize_gb = 20


; Whether or not to upload data.  If disabled, results will queue on the local beanstalkd queue
upload_data = 0

; The destination URL where OpenALPR will post data
upload_address = http://localhost:8080/plate

; Concurrent threads used for uploading.  Higher threads help push data over high latency connections.
upload_threads = 6

; Whether to upload plate group and vehicle data
upload_groups = 1

; Whether to upload individual plate reads
upload_single_plates = 0

; Save to another beanstalkd tube.  Useful for integrating with other software 
; while still using the ALPR service to upload.  
; If enabled, your process must drain the queue otherwise results will build up in memory
upload_write_second_tube = 0

; Specifies the second beanstalkd tube name to write to
upload_write_second_tube_name = alprd-alt

; Specifies whether to upload the data on the second queue or leave it on the beanstalkd tube
upload_second_tube_post_enabled = 0

; Specifies destination address to post second tube data when enabled
upload_second_tube_post_url = http://localhost/

; When uploads are delayed (e.g., due to an internet outage) how long should plates be considered valid 
; before dropping them.  By default (-1), plates will never be dropped.  For more real-time use cases, old plates may 
; not be useful and sending a large backlog after being offline may not be useful
upload_oldest_plate_seconds = -1

; Specify the path to the runtime data directory
runtime_dir = ${CMAKE_INSTALL_PREFIX}/share/openalpr/runtime_data

ocr_img_size_percent = 1.33333333
state_id_img_size_percent = 2.0

; Calibrating your camera improves detection accuracy in cases where vehicle plates are captured at a steep angle
; Use the openalpr-utils-calibrate utility to calibrate your fixed camera to adjust for an angle
; Once done, update the prewarp config with the values obtained from the tool
prewarp =

; detection will ignore plates that are too large.  This is a good efficiency technique to use if the 
; plates are going to be a fixed distance away from the camera (e.g., you will never see plates that fill 
; up the entire image
max_plate_width_percent = 100
max_plate_height_percent = 100

; detection_iteration_increase is the percentage that the LBP frame increases each iteration.
; It must be greater than 1.0.  A value of 1.01 means increase by 1%, 1.10 increases it by 10% each time. 
; So a 1% increase would be ~10x slower than 10% to process, but it has a higher chance of landing 
; directly on the plate and getting a strong detection
detection_iteration_increase = 1.1

; The minimum detection strength determines how sure the detection algorithm must be before signaling that 
; a plate region exists.  Technically this corresponds to LBP nearest neighbors (e.g., how many detections 
; are clustered around the same area).  For example, 2 = very lenient, 9 = very strict.
detection_strictness = 3

; Number of GPU scales to cache in memory.  Setting this to a higher value provides more caching for different sized input videos at the expense of memory.
; Setting this value to 0 (default) uses an automatic mode
num_trt_gpu_instances = 0

; The detection doesn't necessarily need an extremely high resolution image in order to detect plates.
; Using a smaller input image should still find the plates and will do it faster.
; This setting controls how much to downsample the image for detection.  Lower values increase speed but would potentially miss smaller plates.
plate_detection_scale = 0.5

; Force plate detection to resize all inputs to a fixed resolution
fixed_detection_input = 0

; The maximum resolution used for detection (after downsampling).  This setting prevents ultra-high resolution inputs (e.g., 4k+) from
; taking inordinate amounts of processing time unless explicitly configured.
max_detection_input_width = 1280
max_detection_input_height = 720

; The minimum resolution used for detection (after downsampling).  This setting prevents ultra-low resolution images from being 
; downsampled too small and missing plates
; min_detection_input_width = 640
; min_detection_input_height = 360

; detector is the technique used to find license plate regions in an image.  Value can be set to
; lbpcpu    - default LBP-based detector uses the system CPU  
; lbpgpu    - LBP-based detector that uses Nvidia GPU to increase recognition speed.
; lbpopencl - LBP-based detector that uses OpenCL GPU to increase recognition speed.  Requires OpenCV 3.0
; morphcpu  - Experimental detector that detects white rectangles in an image.  Does not require training.
detector = lbpcpu

; If set to true, all results must match a postprocess text pattern if a pattern is available.  
; If not, the result is disqualified. 
must_match_pattern = 0

; Bypasses plate detection.  If this is set to 1, the library assumes that each region provided is a likely plate area.
skip_detection = 0

; Bypasses character recognition.  If this is set to 1, the library only looks for license plates and does not attempt to identify the characters
skip_recognition = 0

; Bypasses vehicle detection.  If this is set to 1, the library will not find bounding boxes for vehicles
skip_vehicle_detection = 0

; Detection modes are "fast", "balanced", and "accurate".  Balanced and accurate vehicle detectors are significantly slower
; however, they detect smaller vehicles more accurately.  Balanced and accurate detectors are not optimized for GPU and are only recommended for CPU processing
vehicle_detect_mode = fast

; Specifies the full path to an image file that constrains the detection area.  Only the plate regions allowed through the mask 
; will be analyzed.  The mask image must match the resolution of your image to be analyzed.  The mask is black and white.  
; Black areas will be ignored, white areas will be searched.  An empty value means no mask (scan the entire image)
detection_mask_image = 

; OpenALPR can scan the same image multiple times with different randomization.  Setting this to a value larger than
; 1 may increase accuracy, but will increase processing time linearly (e.g., analysis_count = 3 is 3x slower)
analysis_count = 1

; OpenALPR detects high-contrast plate crops and uses an alternative edge detection technique.  Setting this to 0.0 
; would classify  ALL images as high-contrast, setting it to 1.0 would classify no images as high-contrast. 
contrast_detection_threshold = 0.3

max_plate_angle_degrees = 15

ocr_min_font_point = 6

; Overrides the environment variable OPENALPR_SKIP_TENSORRT
openalpr_skip_tensorrt = 0

; Minimum OCR confidence percent to consider.
postprocess_min_confidence = 65

; Any OCR character lower than this will also add an equally likely
; chance that the character is incorrect and will be skipped.  Value is a confidence percent
postprocess_confidence_skip_level = 80

; Encode the plate to a JPEG and return it with every frame result
crop_jpeg_enabled = 0

; The quality level used to encode JPEG crops of the license plate areas
crop_jpeg_quality = 75

debug_general         = 0
debug_timing          = 0
debug_detector        = 0
debug_prewarp         = 0
debug_state_id        = 0
debug_plate_lines     = 0
debug_plate_corners   = 0
debug_char_segment    = 0
debug_char_analysis   = 0
debug_color_filter    = 0
debug_ocr             = 0
debug_postprocess     = 0
debug_show_images     = 0
debug_pause_on_frame  = 0